/*
 * This file is generated by jOOQ.
 */
package com.billingweb.model.tables;


import com.billingweb.model.Keys;
import com.billingweb.model.Public;
import com.billingweb.model.tables.records.ItProfilesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores application profiles
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItProfiles extends TableImpl<ItProfilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.it_profiles</code>
     */
    public static final ItProfiles IT_PROFILES = new ItProfiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItProfilesRecord> getRecordType() {
        return ItProfilesRecord.class;
    }

    /**
     * The column <code>public.it_profiles.profile_id</code>. InternaL identifier of the profile
     */
    public final TableField<ItProfilesRecord, Integer> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_profile_id'::regclass)", SQLDataType.INTEGER)), this, "InternaL identifier of the profile");

    /**
     * The column <code>public.it_profiles.profile_code</code>. Code of the profile
     */
    public final TableField<ItProfilesRecord, String> PROFILE_CODE = createField(DSL.name("profile_code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the profile");

    /**
     * The column <code>public.it_profiles.description</code>. Description for the profile
     */
    public final TableField<ItProfilesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "Description for the profile");

    private ItProfiles(Name alias, Table<ItProfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItProfiles(Name alias, Table<ItProfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores application profiles"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.it_profiles</code> table reference
     */
    public ItProfiles(String alias) {
        this(DSL.name(alias), IT_PROFILES);
    }

    /**
     * Create an aliased <code>public.it_profiles</code> table reference
     */
    public ItProfiles(Name alias) {
        this(alias, IT_PROFILES);
    }

    /**
     * Create a <code>public.it_profiles</code> table reference
     */
    public ItProfiles() {
        this(DSL.name("it_profiles"), null);
    }

    public <O extends Record> ItProfiles(Table<O> child, ForeignKey<O, ItProfilesRecord> key) {
        super(child, key, IT_PROFILES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ItProfilesRecord> getPrimaryKey() {
        return Keys.IT_PROFILES_PKEY;
    }

    @Override
    public List<UniqueKey<ItProfilesRecord>> getKeys() {
        return Arrays.<UniqueKey<ItProfilesRecord>>asList(Keys.IT_PROFILES_PKEY, Keys.IT_PROFILES_PROFILE_CODE_KEY);
    }

    @Override
    public ItProfiles as(String alias) {
        return new ItProfiles(DSL.name(alias), this);
    }

    @Override
    public ItProfiles as(Name alias) {
        return new ItProfiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItProfiles rename(String name) {
        return new ItProfiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItProfiles rename(Name name) {
        return new ItProfiles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
