/*
 * This file is generated by jOOQ.
 */
package com.billingweb.model.tables;


import com.billingweb.model.Keys;
import com.billingweb.model.Public;
import com.billingweb.model.tables.records.CtBillCycleTypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the bill cycle type of the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CtBillCycleType extends TableImpl<CtBillCycleTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ct_bill_cycle_type</code>
     */
    public static final CtBillCycleType CT_BILL_CYCLE_TYPE = new CtBillCycleType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CtBillCycleTypeRecord> getRecordType() {
        return CtBillCycleTypeRecord.class;
    }

    /**
     * The column <code>public.ct_bill_cycle_type.bill_cycle_type_id</code>. Internal identifier of the bill cycle type
     */
    public final TableField<CtBillCycleTypeRecord, Integer> BILL_CYCLE_TYPE_ID = createField(DSL.name("bill_cycle_type_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_bill_cycle_type_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the bill cycle type");

    /**
     * The column <code>public.ct_bill_cycle_type.code</code>. Code of the bill cycle type
     */
    public final TableField<CtBillCycleTypeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the bill cycle type");

    /**
     * The column <code>public.ct_bill_cycle_type.name</code>. Name of the bill cycle type
     */
    public final TableField<CtBillCycleTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "Name of the bill cycle type");

    /**
     * The column <code>public.ct_bill_cycle_type.description</code>. Description for the bill cycle type
     */
    public final TableField<CtBillCycleTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "Description for the bill cycle type");

    /**
     * The column <code>public.ct_bill_cycle_type.billing_period_id</code>. Billing period for the bill cycle type
     */
    public final TableField<CtBillCycleTypeRecord, Integer> BILLING_PERIOD_ID = createField(DSL.name("billing_period_id"), SQLDataType.INTEGER.nullable(false), this, "Billing period for the bill cycle type");

    /**
     * The column <code>public.ct_bill_cycle_type.bill_cycle_day</code>.
     */
    public final TableField<CtBillCycleTypeRecord, Byte> BILL_CYCLE_DAY = createField(DSL.name("bill_cycle_day"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>public.ct_bill_cycle_type.bill_cycle_codenum</code>. Billing numbering code with which the invoice number is composed
     */
    public final TableField<CtBillCycleTypeRecord, String> BILL_CYCLE_CODENUM = createField(DSL.name("bill_cycle_codenum"), SQLDataType.VARCHAR(10).nullable(false), this, "Billing numbering code with which the invoice number is composed");

    /**
     * The column <code>public.ct_bill_cycle_type.status_id</code>.
     */
    public final TableField<CtBillCycleTypeRecord, Integer> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1000", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.ct_bill_cycle_type.input_date</code>.
     */
    public final TableField<CtBillCycleTypeRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("(('now'::text)::timestamp(0) with time zone)::timestamp without time zone", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.ct_bill_cycle_type.input_user</code>.
     */
    public final TableField<CtBillCycleTypeRecord, String> INPUT_USER = createField(DSL.name("input_user"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.ct_bill_cycle_type.modif_date</code>.
     */
    public final TableField<CtBillCycleTypeRecord, LocalDateTime> MODIF_DATE = createField(DSL.name("modif_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.ct_bill_cycle_type.modif_user</code>.
     */
    public final TableField<CtBillCycleTypeRecord, String> MODIF_USER = createField(DSL.name("modif_user"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.ct_bill_cycle_type.corrective</code>. Flag for corrective cycle (true: corrective cycle, false: ordinary cycle)
     */
    public final TableField<CtBillCycleTypeRecord, Boolean> CORRECTIVE = createField(DSL.name("corrective"), SQLDataType.BOOLEAN.nullable(false), this, "Flag for corrective cycle (true: corrective cycle, false: ordinary cycle)");

    private CtBillCycleType(Name alias, Table<CtBillCycleTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CtBillCycleType(Name alias, Table<CtBillCycleTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the bill cycle type of the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ct_bill_cycle_type</code> table reference
     */
    public CtBillCycleType(String alias) {
        this(DSL.name(alias), CT_BILL_CYCLE_TYPE);
    }

    /**
     * Create an aliased <code>public.ct_bill_cycle_type</code> table reference
     */
    public CtBillCycleType(Name alias) {
        this(alias, CT_BILL_CYCLE_TYPE);
    }

    /**
     * Create a <code>public.ct_bill_cycle_type</code> table reference
     */
    public CtBillCycleType() {
        this(DSL.name("ct_bill_cycle_type"), null);
    }

    public <O extends Record> CtBillCycleType(Table<O> child, ForeignKey<O, CtBillCycleTypeRecord> key) {
        super(child, key, CT_BILL_CYCLE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CtBillCycleTypeRecord> getPrimaryKey() {
        return Keys.CT_BILL_CYCLE_TYPE_PK;
    }

    @Override
    public List<UniqueKey<CtBillCycleTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CtBillCycleTypeRecord>>asList(Keys.CT_BILL_CYCLE_TYPE_PK, Keys.CT_BILL_CYCLE_TYPE_CODE_U, Keys.CT_BILL_CYCLE_TYPE_NAME_U, Keys.CT_BILL_CYCLE_TYPE_CODNUM_U);
    }

    @Override
    public List<ForeignKey<CtBillCycleTypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CtBillCycleTypeRecord, ?>>asList(Keys.CT_BILL_CYCLE_TYPE__CT_BILL_CYCLE_TYPE_PERIOD_FK, Keys.CT_BILL_CYCLE_TYPE__CT_BILL_CYCLE_TYPE_STATUS_FK);
    }

    private transient PtBillingPeriod _ptBillingPeriod;
    private transient PtStatus _ptStatus;

    public PtBillingPeriod ptBillingPeriod() {
        if (_ptBillingPeriod == null)
            _ptBillingPeriod = new PtBillingPeriod(this, Keys.CT_BILL_CYCLE_TYPE__CT_BILL_CYCLE_TYPE_PERIOD_FK);

        return _ptBillingPeriod;
    }

    public PtStatus ptStatus() {
        if (_ptStatus == null)
            _ptStatus = new PtStatus(this, Keys.CT_BILL_CYCLE_TYPE__CT_BILL_CYCLE_TYPE_STATUS_FK);

        return _ptStatus;
    }

    @Override
    public CtBillCycleType as(String alias) {
        return new CtBillCycleType(DSL.name(alias), this);
    }

    @Override
    public CtBillCycleType as(Name alias) {
        return new CtBillCycleType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CtBillCycleType rename(String name) {
        return new CtBillCycleType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CtBillCycleType rename(Name name) {
        return new CtBillCycleType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, Integer, Byte, String, Integer, LocalDateTime, String, LocalDateTime, String, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
