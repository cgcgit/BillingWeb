/*
 * This file is generated by jOOQ.
 */
package com.billingweb.model.tables;


import com.billingweb.model.Keys;
import com.billingweb.model.Public;
import com.billingweb.model.tables.records.PtStatusRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the status for the entities of the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PtStatus extends TableImpl<PtStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pt_status</code>
     */
    public static final PtStatus PT_STATUS = new PtStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PtStatusRecord> getRecordType() {
        return PtStatusRecord.class;
    }

    /**
     * The column <code>public.pt_status.status_id</code>. Internal identifier of the status
     */
    public final TableField<PtStatusRecord, Integer> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_status_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the status");

    /**
     * The column <code>public.pt_status.code</code>. Code of the status
     */
    public final TableField<PtStatusRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the status");

    /**
     * The column <code>public.pt_status.name</code>. Name of the status
     */
    public final TableField<PtStatusRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "Name of the status");

    /**
     * The column <code>public.pt_status.description</code>. Description for the status
     */
    public final TableField<PtStatusRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "Description for the status");

    private PtStatus(Name alias, Table<PtStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private PtStatus(Name alias, Table<PtStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the status for the entities of the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pt_status</code> table reference
     */
    public PtStatus(String alias) {
        this(DSL.name(alias), PT_STATUS);
    }

    /**
     * Create an aliased <code>public.pt_status</code> table reference
     */
    public PtStatus(Name alias) {
        this(alias, PT_STATUS);
    }

    /**
     * Create a <code>public.pt_status</code> table reference
     */
    public PtStatus() {
        this(DSL.name("pt_status"), null);
    }

    public <O extends Record> PtStatus(Table<O> child, ForeignKey<O, PtStatusRecord> key) {
        super(child, key, PT_STATUS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PtStatusRecord> getPrimaryKey() {
        return Keys.PT_STATUS_PK;
    }

    @Override
    public List<UniqueKey<PtStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<PtStatusRecord>>asList(Keys.PT_STATUS_PK, Keys.PT_STATUS_CODE_U, Keys.PT_STATUS_NAME_U);
    }

    @Override
    public PtStatus as(String alias) {
        return new PtStatus(DSL.name(alias), this);
    }

    @Override
    public PtStatus as(Name alias) {
        return new PtStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PtStatus rename(String name) {
        return new PtStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PtStatus rename(Name name) {
        return new PtStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
