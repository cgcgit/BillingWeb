/*
 * This file is generated by jOOQ.
 */
package com.billingweb.model.tables.daos;


import com.billingweb.model.tables.CtProductType;
import com.billingweb.model.tables.records.CtProductTypeRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * Table that stores the product types of the catalog for the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CtProductTypeDao extends DAOImpl<CtProductTypeRecord, com.billingweb.model.tables.pojos.CtProductType, Integer> {

    /**
     * Create a new CtProductTypeDao without any configuration
     */
    public CtProductTypeDao() {
        super(CtProductType.CT_PRODUCT_TYPE, com.billingweb.model.tables.pojos.CtProductType.class);
    }

    /**
     * Create a new CtProductTypeDao with an attached configuration
     */
    public CtProductTypeDao(Configuration configuration) {
        super(CtProductType.CT_PRODUCT_TYPE, com.billingweb.model.tables.pojos.CtProductType.class, configuration);
    }

    @Override
    public Integer getId(com.billingweb.model.tables.pojos.CtProductType object) {
        return object.getProductTypeId();
    }

    /**
     * Fetch records that have <code>product_type_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfProductTypeId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.PRODUCT_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_type_id IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByProductTypeId(Integer... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.PRODUCT_TYPE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>product_type_id = value</code>
     */
    public com.billingweb.model.tables.pojos.CtProductType fetchOneByProductTypeId(Integer value) {
        return fetchOne(CtProductType.CT_PRODUCT_TYPE.PRODUCT_TYPE_ID, value);
    }

    /**
     * Fetch records that have <code>entity_type_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfEntityTypeId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.ENTITY_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>entity_type_id IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByEntityTypeId(Integer... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.ENTITY_TYPE_ID, values);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByCode(String... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public com.billingweb.model.tables.pojos.CtProductType fetchOneByCode(String value) {
        return fetchOne(CtProductType.CT_PRODUCT_TYPE.CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByName(String... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public com.billingweb.model.tables.pojos.CtProductType fetchOneByName(String value) {
        return fetchOne(CtProductType.CT_PRODUCT_TYPE.NAME, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByDescription(String... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>status_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfStatusId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.STATUS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status_id IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByStatusId(Integer... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.STATUS_ID, values);
    }

    /**
     * Fetch records that have <code>input_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfInputDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.INPUT_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>input_date IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByInputDate(LocalDateTime... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.INPUT_DATE, values);
    }

    /**
     * Fetch records that have <code>input_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfInputUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.INPUT_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>input_user IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByInputUser(String... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.INPUT_USER, values);
    }

    /**
     * Fetch records that have <code>modif_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfModifDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.MODIF_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modif_date IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByModifDate(LocalDateTime... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.MODIF_DATE, values);
    }

    /**
     * Fetch records that have <code>modif_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchRangeOfModifUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(CtProductType.CT_PRODUCT_TYPE.MODIF_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modif_user IN (values)</code>
     */
    public List<com.billingweb.model.tables.pojos.CtProductType> fetchByModifUser(String... values) {
        return fetch(CtProductType.CT_PRODUCT_TYPE.MODIF_USER, values);
    }
}
