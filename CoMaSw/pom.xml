<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.comasw</groupId>
	<artifactId>CoMaSw</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<!-- https://stackoverflow.com/questions/44983030/jaspic-configuration-in-wildfly-swarm -->
	<!-- https://stackoverflow.com/questions/41826619/wildfly-swarm-deployment-issue-failed-to-resolve-artifact-xalanserializer2 -->
	<repositories>
		<repository>
			<id>boss-public-repository</id>
			<name>JBoss Releases Repository</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases/</url>
		</repository>
	</repositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<failOnMissingWebXml>false</failOnMissingWebXml>
	</properties>
	<dependencies>
		<dependency>
			<groupId>jakarta.platform</groupId>
			<artifactId>jakarta.jakartaee-api</artifactId>
			<version>8.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-web-api</artifactId>
			<version>8.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.security.enterprise</groupId>
			<artifactId>javax.security.enterprise-api</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.soteria</groupId>
			<artifactId>javax.security.enterprise</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- Apache log for development environment -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.15.0</version>
		</dependency>
		<!-- Apache log for production environment -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.15.0</version>
		</dependency>
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>11.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.webjars.npm</groupId>
			<artifactId>primeflex</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.omnifaces</groupId>
			<artifactId>omnifaces</artifactId>
			<version>3.13.2</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>3.14.16</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>3.14.16</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>3.14.16</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.4.0</version>
		</dependency>
		<!-- For improved logging, we'll be using log4j via slf4j to see what's 
			going on during migration and code generation -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.15.0</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<!-- JOOQ - CODEGEN-MAVEN PLUGIN -->
			<plugin>
				<!-- Specify the maven code generator plugin -->
				<!-- Use org.jooq for the Open Source Edition org.jooq.pro for commercial 
					editions with Java 17 support, org.jooq.pro-java-11 for commercial editions 
					with Java 11 support, org.jooq.pro-java-8 for commercial editions with Java 
					8 support, org.jooq.trial for the free trial edition with Java 17 support, 
					org.jooq.trial-java-11 for the free trial edition with Java 11 support, org.jooq.trial-java-8 
					for the free trial edition with Java 8 support Note: Only the Open Source 
					Edition is hosted on Maven Central. Import the others manually from your 
					distribution -->
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.14.16</version>

				<!-- The plugin should hook into the generate goal -->
				<executions>
					<execution>
						<id>jooq-codegen</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<!-- Specify the plugin configuration. The configuration format is the 
					same as for the standalone code generator -->
				<configuration>
					<!-- JDBC connection parameters -->
					<jdbc>
						<driver>org.postgresql.Driver</driver>
						<url>jdbc:postgresql://localhost:5432/db_comasw</url>
						<user>comasw_app</user>
						<password>comasw_app</password>
					</jdbc>

					<!-- Generator parameters -->
					<generator>
						<database>
							<name>org.jooq.meta.postgres.PostgresDatabase</name>
							<!-- Optimised optimistic locking using VERSION fields -->
							<recordVersionFields>REC_VERSION</recordVersionFields>
							<recordTimestampFields>REC_TIMESTAMP</recordTimestampFields>
							<dateAsTimestamp>true</dateAsTimestamp>
							<!-- In case your database supports catalogs, e.g. SQL Server: <inputCatalog>public</inputCatalog> -->
							<inputSchema>public</inputSchema>
							<includes>.*</includes>
							<excludes></excludes>
						</database>
						<generate>
							<!-- Generate DAOs in addition to POJO classes Defaults to false -->
							<daos>true</daos>
							<!-- Generate POJOs in addition to Record classes for usage of the 
								ResultQuery.fetchInto(Class) API Defaults to false -->
							<pojos>true</pojos>
							<!-- Generate interfaces that will be implemented by records and/or 
								pojos. You can also use these interfaces in Record.into(Class<?>) and similar 
								methods, to let jOOQ return proxy objects for them. Defaults to false -->
							<interfaces>true</interfaces>
							<!-- Allow to turn off the generation of global object references, 
								which include - Tables.java - Sequences.java - UDTs.java Turning off the 
								generation of the above files may be necessary for very large schemas, which 
								exceed the amount of allowed constants in a class's constant pool (64k) or, 
								whose static initialiser would exceed 64k of byte code Defaults to true -->
							<globalObjectReferences>true</globalObjectReferences>
						</generate>

						<target>
							<packageName>com.comasw.model</packageName>
							<directory>target/generated-sources/jooq</directory>
							<encoding>UTF-8</encoding>
						</target>
					</generator>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>