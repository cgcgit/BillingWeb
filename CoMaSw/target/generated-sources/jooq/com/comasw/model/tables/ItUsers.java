/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables;


import com.comasw.model.Keys;
import com.comasw.model.Public;
import com.comasw.model.tables.records.ItUsersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores application users
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItUsers extends TableImpl<ItUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.it_users</code>
     */
    public static final ItUsers IT_USERS = new ItUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItUsersRecord> getRecordType() {
        return ItUsersRecord.class;
    }

    /**
     * The column <code>public.it_users.user_id</code>. InternaL identifier of the user
     */
    public final TableField<ItUsersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_user_id'::regclass)", SQLDataType.INTEGER)), this, "InternaL identifier of the user");

    /**
     * The column <code>public.it_users.name</code>. Name of the user
     */
    public final TableField<ItUsersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "Name of the user");

    /**
     * The column <code>public.it_users.surname</code>. Surname of the user
     */
    public final TableField<ItUsersRecord, String> SURNAME = createField(DSL.name("surname"), SQLDataType.VARCHAR(100).nullable(false), this, "Surname of the user");

    /**
     * The column <code>public.it_users.email</code>. Email of the user
     */
    public final TableField<ItUsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50).nullable(false), this, "Email of the user");

    /**
     * The column <code>public.it_users.phone_contact</code>. Phone contact of the user
     */
    public final TableField<ItUsersRecord, String> PHONE_CONTACT = createField(DSL.name("phone_contact"), SQLDataType.VARCHAR(50), this, "Phone contact of the user");

    /**
     * The column <code>public.it_users.user_code</code>. Code of the user (to login)
     */
    public final TableField<ItUsersRecord, String> USER_CODE = createField(DSL.name("user_code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the user (to login)");

    /**
     * The column <code>public.it_users.password</code>. Password for the user - md5 encrypted
     */
    public final TableField<ItUsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CHAR(32).nullable(false), this, "Password for the user - md5 encrypted");

    /**
     * The column <code>public.it_users.profile_id</code>. Internal identifier for the profile of the user
     */
    public final TableField<ItUsersRecord, Integer> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.INTEGER.nullable(false), this, "Internal identifier for the profile of the user");

    /**
     * The column <code>public.it_users.active</code>.
     */
    public final TableField<ItUsersRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ItUsers(Name alias, Table<ItUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItUsers(Name alias, Table<ItUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores application users"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.it_users</code> table reference
     */
    public ItUsers(String alias) {
        this(DSL.name(alias), IT_USERS);
    }

    /**
     * Create an aliased <code>public.it_users</code> table reference
     */
    public ItUsers(Name alias) {
        this(alias, IT_USERS);
    }

    /**
     * Create a <code>public.it_users</code> table reference
     */
    public ItUsers() {
        this(DSL.name("it_users"), null);
    }

    public <O extends Record> ItUsers(Table<O> child, ForeignKey<O, ItUsersRecord> key) {
        super(child, key, IT_USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ItUsersRecord> getPrimaryKey() {
        return Keys.IT_USERS_PKEY;
    }

    @Override
    public List<UniqueKey<ItUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<ItUsersRecord>>asList(Keys.IT_USERS_PKEY, Keys.IT_USERS_USER_CODE_KEY);
    }

    @Override
    public List<ForeignKey<ItUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItUsersRecord, ?>>asList(Keys.IT_USERS__IT_USERS_PROFILE_ID_FKEY);
    }

    private transient ItProfiles _itProfiles;

    public ItProfiles itProfiles() {
        if (_itProfiles == null)
            _itProfiles = new ItProfiles(this, Keys.IT_USERS__IT_USERS_PROFILE_ID_FKEY);

        return _itProfiles;
    }

    @Override
    public ItUsers as(String alias) {
        return new ItUsers(DSL.name(alias), this);
    }

    @Override
    public ItUsers as(Name alias) {
        return new ItUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItUsers rename(String name) {
        return new ItUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItUsers rename(Name name) {
        return new ItUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, Integer, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
