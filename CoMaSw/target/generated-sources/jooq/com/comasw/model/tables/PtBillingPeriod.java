/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables;


import com.comasw.model.Keys;
import com.comasw.model.Public;
import com.comasw.model.tables.records.PtBillingPeriodRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the billing period types for the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PtBillingPeriod extends TableImpl<PtBillingPeriodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pt_billing_period</code>
     */
    public static final PtBillingPeriod PT_BILLING_PERIOD = new PtBillingPeriod();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PtBillingPeriodRecord> getRecordType() {
        return PtBillingPeriodRecord.class;
    }

    /**
     * The column <code>public.pt_billing_period.billing_period_id</code>. Internal identifier of the billing period type
     */
    public final TableField<PtBillingPeriodRecord, Integer> BILLING_PERIOD_ID = createField(DSL.name("billing_period_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_billing_period_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the billing period type");

    /**
     * The column <code>public.pt_billing_period.code</code>. Code of the billing period type
     */
    public final TableField<PtBillingPeriodRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the billing period type");

    /**
     * The column <code>public.pt_billing_period.name</code>. Name of the billing period type
     */
    public final TableField<PtBillingPeriodRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "Name of the billing period type");

    /**
     * The column <code>public.pt_billing_period.description</code>. Description for the billing period type
     */
    public final TableField<PtBillingPeriodRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "Description for the billing period type");

    /**
     * The column <code>public.pt_billing_period.billing_period_days</code>. Number of days that defines the billing period
     */
    public final TableField<PtBillingPeriodRecord, Short> BILLING_PERIOD_DAYS = createField(DSL.name("billing_period_days"), SQLDataType.SMALLINT.nullable(false), this, "Number of days that defines the billing period");

    private PtBillingPeriod(Name alias, Table<PtBillingPeriodRecord> aliased) {
        this(alias, aliased, null);
    }

    private PtBillingPeriod(Name alias, Table<PtBillingPeriodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the billing period types for the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pt_billing_period</code> table reference
     */
    public PtBillingPeriod(String alias) {
        this(DSL.name(alias), PT_BILLING_PERIOD);
    }

    /**
     * Create an aliased <code>public.pt_billing_period</code> table reference
     */
    public PtBillingPeriod(Name alias) {
        this(alias, PT_BILLING_PERIOD);
    }

    /**
     * Create a <code>public.pt_billing_period</code> table reference
     */
    public PtBillingPeriod() {
        this(DSL.name("pt_billing_period"), null);
    }

    public <O extends Record> PtBillingPeriod(Table<O> child, ForeignKey<O, PtBillingPeriodRecord> key) {
        super(child, key, PT_BILLING_PERIOD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PtBillingPeriodRecord> getPrimaryKey() {
        return Keys.PT_BILLING_PERIOD_PK;
    }

    @Override
    public List<UniqueKey<PtBillingPeriodRecord>> getKeys() {
        return Arrays.<UniqueKey<PtBillingPeriodRecord>>asList(Keys.PT_BILLING_PERIOD_PK, Keys.PT_BILLING_PERIOD_CODE_U, Keys.PT_BILLING_PERIOD_NAME_U);
    }

    @Override
    public PtBillingPeriod as(String alias) {
        return new PtBillingPeriod(DSL.name(alias), this);
    }

    @Override
    public PtBillingPeriod as(Name alias) {
        return new PtBillingPeriod(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PtBillingPeriod rename(String name) {
        return new PtBillingPeriod(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PtBillingPeriod rename(Name name) {
        return new PtBillingPeriod(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
