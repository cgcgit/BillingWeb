/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables.daos;


import com.comasw.model.tables.ItUsers;
import com.comasw.model.tables.records.ItUsersRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * Table that stores application users
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItUsersDao extends DAOImpl<ItUsersRecord, com.comasw.model.tables.pojos.ItUsers, Integer> {

    /**
     * Create a new ItUsersDao without any configuration
     */
    public ItUsersDao() {
        super(ItUsers.IT_USERS, com.comasw.model.tables.pojos.ItUsers.class);
    }

    /**
     * Create a new ItUsersDao with an attached configuration
     */
    public ItUsersDao(Configuration configuration) {
        super(ItUsers.IT_USERS, com.comasw.model.tables.pojos.ItUsers.class, configuration);
    }

    @Override
    public Integer getId(com.comasw.model.tables.pojos.ItUsers object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByUserId(Integer... values) {
        return fetch(ItUsers.IT_USERS.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public com.comasw.model.tables.pojos.ItUsers fetchOneByUserId(Integer value) {
        return fetchOne(ItUsers.IT_USERS.USER_ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByName(String... values) {
        return fetch(ItUsers.IT_USERS.NAME, values);
    }

    /**
     * Fetch records that have <code>surname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfSurname(String lowerInclusive, String upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.SURNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>surname IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchBySurname(String... values) {
        return fetch(ItUsers.IT_USERS.SURNAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByEmail(String... values) {
        return fetch(ItUsers.IT_USERS.EMAIL, values);
    }

    /**
     * Fetch records that have <code>phone_contact BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfPhoneContact(String lowerInclusive, String upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.PHONE_CONTACT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone_contact IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByPhoneContact(String... values) {
        return fetch(ItUsers.IT_USERS.PHONE_CONTACT, values);
    }

    /**
     * Fetch records that have <code>user_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfUserCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.USER_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_code IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByUserCode(String... values) {
        return fetch(ItUsers.IT_USERS.USER_CODE, values);
    }

    /**
     * Fetch a unique record that has <code>user_code = value</code>
     */
    public com.comasw.model.tables.pojos.ItUsers fetchOneByUserCode(String value) {
        return fetchOne(ItUsers.IT_USERS.USER_CODE, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByPassword(String... values) {
        return fetch(ItUsers.IT_USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>profile_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfProfileId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.PROFILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>profile_id IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByProfileId(Integer... values) {
        return fetch(ItUsers.IT_USERS.PROFILE_ID, values);
    }

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchRangeOfActive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(ItUsers.IT_USERS.ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    public List<com.comasw.model.tables.pojos.ItUsers> fetchByActive(Boolean... values) {
        return fetch(ItUsers.IT_USERS.ACTIVE, values);
    }
}
