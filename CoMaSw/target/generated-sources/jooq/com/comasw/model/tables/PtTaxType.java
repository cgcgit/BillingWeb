/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables;


import com.comasw.model.Keys;
import com.comasw.model.Public;
import com.comasw.model.tables.records.PtTaxTypeRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the tax type of the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PtTaxType extends TableImpl<PtTaxTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pt_tax_type</code>
     */
    public static final PtTaxType PT_TAX_TYPE = new PtTaxType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PtTaxTypeRecord> getRecordType() {
        return PtTaxTypeRecord.class;
    }

    /**
     * The column <code>public.pt_tax_type.tax_type_id</code>. Internal identifier of the tax type
     */
    public final TableField<PtTaxTypeRecord, Integer> TAX_TYPE_ID = createField(DSL.name("tax_type_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_tax_type_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the tax type");

    /**
     * The column <code>public.pt_tax_type.code</code>. Code of the tax type
     */
    public final TableField<PtTaxTypeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the tax type");

    /**
     * The column <code>public.pt_tax_type.name</code>. Name of the tax type
     */
    public final TableField<PtTaxTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "Name of the tax type");

    /**
     * The column <code>public.pt_tax_type.description</code>. Description for the tax type
     */
    public final TableField<PtTaxTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "Description for the tax type");

    /**
     * The column <code>public.pt_tax_type.percent_value</code>. Percent value for the tax type
     */
    public final TableField<PtTaxTypeRecord, BigDecimal> PERCENT_VALUE = createField(DSL.name("percent_value"), SQLDataType.NUMERIC(10, 4).nullable(false), this, "Percent value for the tax type");

    private PtTaxType(Name alias, Table<PtTaxTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private PtTaxType(Name alias, Table<PtTaxTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the tax type of the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pt_tax_type</code> table reference
     */
    public PtTaxType(String alias) {
        this(DSL.name(alias), PT_TAX_TYPE);
    }

    /**
     * Create an aliased <code>public.pt_tax_type</code> table reference
     */
    public PtTaxType(Name alias) {
        this(alias, PT_TAX_TYPE);
    }

    /**
     * Create a <code>public.pt_tax_type</code> table reference
     */
    public PtTaxType() {
        this(DSL.name("pt_tax_type"), null);
    }

    public <O extends Record> PtTaxType(Table<O> child, ForeignKey<O, PtTaxTypeRecord> key) {
        super(child, key, PT_TAX_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PtTaxTypeRecord> getPrimaryKey() {
        return Keys.PT_TAX_TYPE_PK;
    }

    @Override
    public List<UniqueKey<PtTaxTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<PtTaxTypeRecord>>asList(Keys.PT_TAX_TYPE_PK, Keys.PT_TAX_TYPE_CODE_U, Keys.PT_TAX_TYPE_NAME_U);
    }

    @Override
    public PtTaxType as(String alias) {
        return new PtTaxType(DSL.name(alias), this);
    }

    @Override
    public PtTaxType as(Name alias) {
        return new PtTaxType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PtTaxType rename(String name) {
        return new PtTaxType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PtTaxType rename(Name name) {
        return new PtTaxType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
