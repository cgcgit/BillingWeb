/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables;


import com.comasw.model.Keys;
import com.comasw.model.Public;
import com.comasw.model.tables.records.PtPaymentMethodRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the payment types for the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PtPaymentMethod extends TableImpl<PtPaymentMethodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pt_payment_method</code>
     */
    public static final PtPaymentMethod PT_PAYMENT_METHOD = new PtPaymentMethod();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PtPaymentMethodRecord> getRecordType() {
        return PtPaymentMethodRecord.class;
    }

    /**
     * The column <code>public.pt_payment_method.payment_method_id</code>. Internal identifier of the payment method
     */
    public final TableField<PtPaymentMethodRecord, Integer> PAYMENT_METHOD_ID = createField(DSL.name("payment_method_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_payment_method_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the payment method");

    /**
     * The column <code>public.pt_payment_method.code</code>. Code of the payment method
     */
    public final TableField<PtPaymentMethodRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(10).nullable(false), this, "Code of the payment method");

    /**
     * The column <code>public.pt_payment_method.name</code>. Name of the payment method
     */
    public final TableField<PtPaymentMethodRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "Name of the payment method");

    /**
     * The column <code>public.pt_payment_method.description</code>. Description for the payment method
     */
    public final TableField<PtPaymentMethodRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "Description for the payment method");

    private PtPaymentMethod(Name alias, Table<PtPaymentMethodRecord> aliased) {
        this(alias, aliased, null);
    }

    private PtPaymentMethod(Name alias, Table<PtPaymentMethodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the payment types for the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pt_payment_method</code> table reference
     */
    public PtPaymentMethod(String alias) {
        this(DSL.name(alias), PT_PAYMENT_METHOD);
    }

    /**
     * Create an aliased <code>public.pt_payment_method</code> table reference
     */
    public PtPaymentMethod(Name alias) {
        this(alias, PT_PAYMENT_METHOD);
    }

    /**
     * Create a <code>public.pt_payment_method</code> table reference
     */
    public PtPaymentMethod() {
        this(DSL.name("pt_payment_method"), null);
    }

    public <O extends Record> PtPaymentMethod(Table<O> child, ForeignKey<O, PtPaymentMethodRecord> key) {
        super(child, key, PT_PAYMENT_METHOD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PtPaymentMethodRecord> getPrimaryKey() {
        return Keys.PT_PAYMENT_METHOD_PK;
    }

    @Override
    public List<UniqueKey<PtPaymentMethodRecord>> getKeys() {
        return Arrays.<UniqueKey<PtPaymentMethodRecord>>asList(Keys.PT_PAYMENT_METHOD_PK, Keys.PT_PAYMENT_METHOD_CODE_U, Keys.PT_PAYMENT_METHOD_NAME_U);
    }

    @Override
    public PtPaymentMethod as(String alias) {
        return new PtPaymentMethod(DSL.name(alias), this);
    }

    @Override
    public PtPaymentMethod as(Name alias) {
        return new PtPaymentMethod(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PtPaymentMethod rename(String name) {
        return new PtPaymentMethod(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PtPaymentMethod rename(Name name) {
        return new PtPaymentMethod(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
