/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables;


import com.comasw.model.Keys;
import com.comasw.model.Public;
import com.comasw.model.tables.records.IdtFeeTypeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the fee_type_id for the fee types of the catalog for 
 * the application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdtFeeType extends TableImpl<IdtFeeTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.idt_fee_type</code>
     */
    public static final IdtFeeType IDT_FEE_TYPE = new IdtFeeType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdtFeeTypeRecord> getRecordType() {
        return IdtFeeTypeRecord.class;
    }

    /**
     * The column <code>public.idt_fee_type.fee_type_id</code>. Internal identifier of the fee type
     */
    public final TableField<IdtFeeTypeRecord, Integer> FEE_TYPE_ID = createField(DSL.name("fee_type_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_fee_type_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the fee type");

    private IdtFeeType(Name alias, Table<IdtFeeTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdtFeeType(Name alias, Table<IdtFeeTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the fee_type_id for the fee types of the catalog for the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.idt_fee_type</code> table reference
     */
    public IdtFeeType(String alias) {
        this(DSL.name(alias), IDT_FEE_TYPE);
    }

    /**
     * Create an aliased <code>public.idt_fee_type</code> table reference
     */
    public IdtFeeType(Name alias) {
        this(alias, IDT_FEE_TYPE);
    }

    /**
     * Create a <code>public.idt_fee_type</code> table reference
     */
    public IdtFeeType() {
        this(DSL.name("idt_fee_type"), null);
    }

    public <O extends Record> IdtFeeType(Table<O> child, ForeignKey<O, IdtFeeTypeRecord> key) {
        super(child, key, IDT_FEE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<IdtFeeTypeRecord> getPrimaryKey() {
        return Keys.IDT_FEE_TYPE_PK;
    }

    @Override
    public List<UniqueKey<IdtFeeTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<IdtFeeTypeRecord>>asList(Keys.IDT_FEE_TYPE_PK);
    }

    @Override
    public IdtFeeType as(String alias) {
        return new IdtFeeType(DSL.name(alias), this);
    }

    @Override
    public IdtFeeType as(Name alias) {
        return new IdtFeeType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdtFeeType rename(String name) {
        return new IdtFeeType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdtFeeType rename(Name name) {
        return new IdtFeeType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
