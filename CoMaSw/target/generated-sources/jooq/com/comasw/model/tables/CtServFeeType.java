/*
 * This file is generated by jOOQ.
 */
package com.comasw.model.tables;


import com.comasw.model.Keys;
import com.comasw.model.Public;
import com.comasw.model.tables.records.CtServFeeTypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table that stores the fee service relation types of the catalog for the 
 * application
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CtServFeeType extends TableImpl<CtServFeeTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ct_serv_fee_type</code>
     */
    public static final CtServFeeType CT_SERV_FEE_TYPE = new CtServFeeType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CtServFeeTypeRecord> getRecordType() {
        return CtServFeeTypeRecord.class;
    }

    /**
     * The column <code>public.ct_serv_fee_type.serv_fee_type_id</code>. Internal identifier of the service-fee relation type
     */
    public final TableField<CtServFeeTypeRecord, Integer> SERV_FEE_TYPE_ID = createField(DSL.name("serv_fee_type_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('seq_serv_fee_type_id'::regclass)", SQLDataType.INTEGER)), this, "Internal identifier of the service-fee relation type");

    /**
     * The column <code>public.ct_serv_fee_type.service_type_id</code>. Product_type_id for the service-fee relation
     */
    public final TableField<CtServFeeTypeRecord, Integer> SERVICE_TYPE_ID = createField(DSL.name("service_type_id"), SQLDataType.INTEGER.nullable(false), this, "Product_type_id for the service-fee relation");

    /**
     * The column <code>public.ct_serv_fee_type.fee_type_id</code>. Service_type_id for the service-fee relation
     */
    public final TableField<CtServFeeTypeRecord, Integer> FEE_TYPE_ID = createField(DSL.name("fee_type_id"), SQLDataType.INTEGER.nullable(false), this, "Service_type_id for the service-fee relation");

    /**
     * The column <code>public.ct_serv_fee_type.status_id</code>. Status id for the service-fee relation type
     */
    public final TableField<CtServFeeTypeRecord, Integer> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1000", SQLDataType.INTEGER)), this, "Status id for the service-fee relation type");

    /**
     * The column <code>public.ct_serv_fee_type.input_date</code>. Date on which the record was created
     */
    public final TableField<CtServFeeTypeRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("(('now'::text)::timestamp(0) with time zone)::timestamp without time zone", SQLDataType.LOCALDATETIME)), this, "Date on which the record was created");

    /**
     * The column <code>public.ct_serv_fee_type.input_user</code>. User who was modified the record
     */
    public final TableField<CtServFeeTypeRecord, String> INPUT_USER = createField(DSL.name("input_user"), SQLDataType.VARCHAR(10).nullable(false), this, "User who was modified the record");

    /**
     * The column <code>public.ct_serv_fee_type.modif_date</code>. Date of the last modification of the record
     */
    public final TableField<CtServFeeTypeRecord, LocalDateTime> MODIF_DATE = createField(DSL.name("modif_date"), SQLDataType.LOCALDATETIME(6), this, "Date of the last modification of the record");

    /**
     * The column <code>public.ct_serv_fee_type.modif_user</code>.
     */
    public final TableField<CtServFeeTypeRecord, String> MODIF_USER = createField(DSL.name("modif_user"), SQLDataType.VARCHAR(10), this, "");

    private CtServFeeType(Name alias, Table<CtServFeeTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CtServFeeType(Name alias, Table<CtServFeeTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table that stores the fee service relation types of the catalog for the application"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ct_serv_fee_type</code> table reference
     */
    public CtServFeeType(String alias) {
        this(DSL.name(alias), CT_SERV_FEE_TYPE);
    }

    /**
     * Create an aliased <code>public.ct_serv_fee_type</code> table reference
     */
    public CtServFeeType(Name alias) {
        this(alias, CT_SERV_FEE_TYPE);
    }

    /**
     * Create a <code>public.ct_serv_fee_type</code> table reference
     */
    public CtServFeeType() {
        this(DSL.name("ct_serv_fee_type"), null);
    }

    public <O extends Record> CtServFeeType(Table<O> child, ForeignKey<O, CtServFeeTypeRecord> key) {
        super(child, key, CT_SERV_FEE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CtServFeeTypeRecord> getPrimaryKey() {
        return Keys.CT_SERV_FEE_TYPE_PK;
    }

    @Override
    public List<UniqueKey<CtServFeeTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CtServFeeTypeRecord>>asList(Keys.CT_SERV_FEE_TYPE_PK, Keys.CT_SERV_FEE_TYPE_CODE_U);
    }

    @Override
    public List<ForeignKey<CtServFeeTypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CtServFeeTypeRecord, ?>>asList(Keys.CT_SERV_FEE_TYPE__CT_SERV_FEE_TYPE_SERVICE_FK, Keys.CT_SERV_FEE_TYPE__CT_SERV_FEE_TYPE_FEE_FK, Keys.CT_SERV_FEE_TYPE__CT_SERV_FEE_TYPE_STATUS_FK);
    }

    private transient CtServiceType _ctServiceType;
    private transient IdtFeeType _idtFeeType;
    private transient PtStatus _ptStatus;

    public CtServiceType ctServiceType() {
        if (_ctServiceType == null)
            _ctServiceType = new CtServiceType(this, Keys.CT_SERV_FEE_TYPE__CT_SERV_FEE_TYPE_SERVICE_FK);

        return _ctServiceType;
    }

    public IdtFeeType idtFeeType() {
        if (_idtFeeType == null)
            _idtFeeType = new IdtFeeType(this, Keys.CT_SERV_FEE_TYPE__CT_SERV_FEE_TYPE_FEE_FK);

        return _idtFeeType;
    }

    public PtStatus ptStatus() {
        if (_ptStatus == null)
            _ptStatus = new PtStatus(this, Keys.CT_SERV_FEE_TYPE__CT_SERV_FEE_TYPE_STATUS_FK);

        return _ptStatus;
    }

    @Override
    public CtServFeeType as(String alias) {
        return new CtServFeeType(DSL.name(alias), this);
    }

    @Override
    public CtServFeeType as(Name alias) {
        return new CtServFeeType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CtServFeeType rename(String name) {
        return new CtServFeeType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CtServFeeType rename(Name name) {
        return new CtServFeeType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Integer, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
